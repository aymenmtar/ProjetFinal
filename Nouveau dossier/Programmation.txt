def lire_code_g(fichier):
    with open(fichier, 'r') as file:
        lignes = file.readlines()
    return lignes

def diviser_en_phases(lignes, phases):
    code_phases = [[] for _ in range(len(phases))]
    couche_actuelle = 0

    for ligne in lignes:
        if ligne.startswith(';LAYER:'):
            couche_actuelle = int(ligne.split(':')[1])
        for i, (start, end) in enumerate(phases):
            if start <= couche_actuelle <= end:
                code_phases[i].append(ligne)
                break

    return code_phases

def ecrire_code_g(fichier, code):
    with open(fichier, 'w') as file:
        file.writelines(code)

def main():
    fichier_gcode = input("Entrez le chemin du fichier G-code : ")
    lignes = lire_code_g(fichier_gcode)

    nombre_phases = int(input("Entrez le nombre de phases : "))
    phases = []
    for i in range(nombre_phases):
        debut_couche = int(input(f"Entrez la couche initiale de la phase {i + 1} : "))
        fin_couche = int(input(f"Entrez la couche finale de la phase {i + 1} : "))
        phases.append((debut_couche, fin_couche))

    code_phases = diviser_en_phases(lignes, phases)

    for i, code in enumerate(code_phases):
        fichier_phase = f"phase_{i + 1}.gcode"
        ecrire_code_g(fichier_phase, code)
        print(f"Phase {i + 1} écrite dans le fichier {fichier_phase}")

if __name__ == "__main__":
    main()




2222222222222222222222
import re

def lire_code_g(fichier):
    with open(fichier, 'r') as file:
        lignes = file.readlines()
    return lignes

def diviser_en_couches(lignes, premiere_hauteur_couche):
    couches = []
    couche_actuelle = []
    z_actuel = None
    z_pattern = re.compile(r'G1.*Z([\d.]+)')

    for ligne in lignes:
        match = z_pattern.search(ligne)
        if match:
            z_nouvelle = float(match.group(1))
            if z_actuel is None:
                z_actuel = z_nouvelle
            elif z_nouvelle != z_actuel:
                couches.append(couche_actuelle)
                couche_actuelle = []
                z_actuel = z_nouvelle
        couche_actuelle.append(ligne)

    if couche_actuelle:
        couches.append(couche_actuelle)

    return couches

def ecrire_code_g(fichier, code):
    with open(fichier, 'w') as file:
        file.writelines(code)

def main():
    fichier_gcode = input("Entrez le chemin du fichier G-code : ")
    lignes = lire_code_g(fichier_gcode)

    premiere_hauteur_couche = float(input("Entrez la hauteur de la première couche (par exemple 0.2) : "))
    couches = diviser_en_couches(lignes, premiere_hauteur_couche)

    nombre_phases = int(input("Entrez le nombre de phases : "))
    phases = []
    for i in range(nombre_phases):
        debut_couche = int(input(f"Entrez la couche initiale de la phase {i + 1} : "))
        fin_couche = int(input(f"Entrez la couche finale de la phase {i + 1} : "))
        phases.append((debut_couche, fin_couche))

    for i, (start, end) in enumerate(phases):
        code_phase = []
        for j in range(start - 1, end):
            code_phase.extend(couches[j])
        fichier_phase = f"phase_{i + 1}.gcode"
        ecrire_code_g(fichier_phase, code_phase)
        print(f"Phase {i + 1} écrite dans le fichier {fichier_phase}")

if __name__ == "__main__":
    main()
333333333333


import re
import os


def lire_code_g(fichier):
    with open(fichier, 'r') as file:
        lignes = file.readlines()
    return lignes


def diviser_en_couches(lignes):
    couches = []
    couche_actuelle = []

    for ligne in lignes:
        if ligne.startswith(';LAYER:'):
            if couche_actuelle:
                couches.append(couche_actuelle)
                couche_actuelle = []
        couche_actuelle.append(ligne)

    if couche_actuelle:
        couches.append(couche_actuelle)

    return couches


def ecrire_code_g(fichier, code):
    with open(fichier, 'w') as file:
        file.writelines(code)


def modifier_temperature(couches, temp_modifications, phases):
    for i, (start, end) in enumerate(phases):
        if i in temp_modifications:
            temp = temp_modifications[i]
            for j in range(start - 1, end):
                couche = couches[j]
                modified_couche = []
                for ligne in couche:
                    modified_couche.append(ligne)
                # Ajouter M104 et M109 pour régler et attendre la température
                modified_couche.insert(0, f'M109 S{temp} ; Wait for extruder temperature\n')
                modified_couche.insert(0, f'M104 S{temp} ; Set extruder temperature\n')
                couches[j] = modified_couche
    return couches


def main():
    fichier_gcode = input("Entrez le chemin du fichier G-code : ")
    lignes = lire_code_g(fichier_gcode)

    couches = diviser_en_couches(lignes)

    print(f"Nombre total de couches : {len(couches)}")

    nombre_phases = int(input("Entrez le nombre de phases : "))
    phases = []
    for i in range(nombre_phases):
        debut_couche = int(input(f"Entrez la couche initiale de la phase {i + 1} : "))
        fin_couche = int(input(f"Entrez la couche finale de la phase {i + 1} : "))
        phases.append((debut_couche, fin_couche))

    temp_modifications = {}
    changer_temp = input(
        "Voulez-vous changer la température de la buse pour une phase spécifique ? (oui/non) : ").strip().lower()
    if changer_temp == 'oui':
        while True:
            phase_num = int(input("Entrez le numéro de la phase où vous souhaitez changer la température : "))
            temperature = int(input("Entrez la température pour cette phase : "))
            temp_modifications[phase_num - 1] = temperature
            continuer = input("Voulez-vous changer la température pour une autre phase ? (oui/non) : ").strip().lower()
            if continuer != 'oui':
                break

    if temp_modifications:
        couches = modifier_temperature(couches, temp_modifications, phases)

    # Fusionner toutes les couches modifiées en un seul fichier G-code
    code_final = []
    for couche in couches:
        code_final.extend(couche)

    # Corriger le chemin du fichier de sortie
    nom_fichier_entree = os.path.basename(fichier_gcode)
    nom_fichier_sortie = os.path.splitext(nom_fichier_entree)[0] + "_modifié.gcode"
    fichier_sortie = os.path.join(os.path.dirname(fichier_gcode), nom_fichier_sortie)

    ecrire_code_g(fichier_sortie, code_final)
    print(f"Nouveau fichier G-code écrit dans {fichier_sortie}")


if __name__ == "__main__":
    main()



temp : 

import os


class GCodeReader:
    def __init__(self, file_path):
        self.file_path = file_path
        self.layers = self._read_gcode()

    def _read_gcode(self):
        with open(self.file_path, 'r') as file:
            lines = file.readlines()
        return self._divide_into_layers(lines)

    def _divide_into_layers(self, lines):
        layers = []
        current_layer = []

        for line in lines:
            if line.startswith(';LAYER:'):
                if current_layer:
                    layers.append(current_layer)
                    current_layer = []
            current_layer.append(line)

        if current_layer:
            layers.append(current_layer)

        return layers

    def get_layers(self):
        return self.layers

    def get_number_of_layers(self):
        return len(self.layers)


class GCodeModifier:
    def __init__(self, layers):
        self.layers = layers

    def modify_temperature_constant(self, temp_modifications, phases):
        for i, (start, end) in enumerate(phases):
            if i in temp_modifications:
                temp = temp_modifications[i]
                for j in range(start - 1, end):
                    layer = self.layers[j]
                    modified_layer = []
                    for line in layer:
                        modified_layer.append(line)
                    # Add M104 and M109 to set and wait for the extruder temperature
                    modified_layer.insert(0, f'M109 S{temp} ; Wait for extruder temperature\n')
                    modified_layer.insert(0, f'M104 S{temp} ; Set extruder temperature\n')
                    self.layers[j] = modified_layer
        return self.layers

    def modify_temperature_linear(self, temp_modifications, phases):
        for i, (start, end) in enumerate(phases):
            if i in temp_modifications:
                temp_start, temp_end = temp_modifications[i]
                num_layers = end - start + 1
                temp_step = (temp_end - temp_start) / (num_layers - 1)
                for j in range(start - 1, end):
                    current_temp = temp_start + (j - (start - 1)) * temp_step
                    layer = self.layers[j]
                    modified_layer = []
                    for line in layer:
                        modified_layer.append(line)
                    # Add M104 and M109 to set and wait for the extruder temperature
                    modified_layer.insert(0, f'M109 S{current_temp} ; Wait for extruder temperature\n')
                    modified_layer.insert(0, f'M104 S{current_temp} ; Set extruder temperature\n')
                    self.layers[j] = modified_layer
        return self.layers

    def save_gcode(self, output_path):
        code_final = []
        for layer in self.layers:
            code_final.extend(layer)
        with open(output_path, 'w') as file:
            file.writelines(code_final)


def main():
    file_path = input("Entrez le chemin du fichier G-code : ")
    gcode_reader = GCodeReader(file_path)

    print(f"Nombre total de couches : {gcode_reader.get_number_of_layers()}")

    num_phases = int(input("Entrez le nombre de phases : "))
    phases = []
    for i in range(num_phases):
        start_layer = int(input(f"Entrez la couche initiale de la phase {i + 1} : "))
        end_layer = int(input(f"Entrez la couche finale de la phase {i + 1} : "))
        phases.append((start_layer, end_layer))

    temp_modifications = {}
    change_temp = input(
        "Voulez-vous changer la température de la buse pour une phase spécifique ? (oui/non) : ").strip().lower()
    if change_temp == 'oui':
        while True:
            phase_num = int(input("Entrez le numéro de la phase où vous souhaitez changer la température : "))
            variation_type = input(
                "Entrez le type de variation de la température (constante/linéaire) : ").strip().lower()
            if variation_type == 'constante':
                temperature = int(input("Entrez la température pour cette phase : "))
                temp_modifications[phase_num - 1] = temperature
            elif variation_type == 'linéaire':
                temp_start = int(input("Entrez la température de la première couche de la phase : "))
                temp_end = int(input("Entrez la température de la dernière couche de la phase : "))
                temp_modifications[phase_num - 1] = (temp_start, temp_end)
            continue_change = input(
                "Voulez-vous changer la température pour une autre phase ? (oui/non) : ").strip().lower()
            if continue_change != 'oui':
                break

    gcode_modifier = GCodeModifier(gcode_reader.get_layers())

    if temp_modifications:
        for i, variation_type in temp_modifications.items():
            if isinstance(variation_type, int):  # Température constante
                gcode_modifier.modify_temperature_constant({i: variation_type}, [phases[i]])
            elif isinstance(variation_type, tuple):  # Température linéaire
                gcode_modifier.modify_temperature_linear({i: variation_type}, [phases[i]])

    # Correct the output file path
    input_filename = os.path.basename(file_path)
    output_filename = os.path.splitext(input_filename)[0] + "_modifié.gcode"
    output_path = os.path.join(os.path.dirname(file_path), output_filename)

    gcode_modifier.save_gcode(output_path)
    print(f"Nouveau fichier G-code écrit dans {output_path}")


if __name__ == "__main__":
    main()
